#!/usr/bin/env python3

"""
Automate finding and displaying help text for commands with varying help flag conventions.

Usage:
    $ ./halp.py command | pager

This script tries different conventions for help flags and directs output to stdout,
handling commands that output help text to either stdout or stderr.

Functions:
    find_command_help(command: str) -> None: Attempts to display the help text for a given command.
"""

import shutil
import subprocess
import sys

from typing import Optional


def run_command(command: str) -> str | None:
    """
    Executes a command and returns its output if successful, None otherwise.

    Args:
        command: The command to execute.

    Returns:
        The combined stdout and stderr output of the command if execution was successful, None otherwise.

    >>> run_command("echo 'Hello, World!'")  # doctest: +ELLIPSIS
    'Hello, World!\\n'
    """
    try:
        result = subprocess.run(
            command.split(), capture_output=True, text=True, check=True
        )
        return result.stdout + result.stderr
    except subprocess.CalledProcessError:
        return None


def find_command_help(command: str) -> None:
    """
    Tries different help flag conventions to display a command's help text.

    Args:
        command: The command to find help text for.
    """
    if not shutil.which(command):
        print(f"Command not found: {command}")
        sys.exit(1)

    tries = [
        f"{command} --help",
        f"{command} -?",
        f"{command} -h",
        f"{command} help",
        f"{command} -help",
        f"tldr {command}",
        f"info {command}",
    ]

    for attempt in tries:
        output = run_command(attempt)
        if output:
            print(f"+ {attempt}")
            print(output)
            return

    sys.exit("Help text not found for command.")


if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: halp.py <command>")
        sys.exit(1)

    find_command_help(sys.argv[1])
