#!/usr/bin/env bash
#
# this script was a terrible, terrible mistake

# Debugging tools. {{{1
set -o errexit  # exit on errors
set -o nounset  # exit on use of uninitialized variable
set -o errtrace # inherits trap on ERR in function and subshell

trap 'traperror $? $LINENO $BASH_LINENO "$BASH_COMMAND" $(printf "::%s" ${FUNCNAME[@]:-})' ERR
trap 'trapexit $? $LINENO' EXIT

trapexit() {
  log "EXIT on line $2 (exit status $1)" "INFO "
}

traperror () {
  local err=$1  # error status
  local line=$2  # LINENO
  local linecallfunc=$3
  local command="$4"
  local funcstack="$5"

  log "'$command' failed at line $line - exited with status: $err" "ERROR"

  if [ "$funcstack" != "::" ]; then
    message="Error in $funcstack"
    if [ "$linecallfunc" != "" ]; then
      message="$message called at line $linecallfunc"
    fi
    log "$message" "DEBUG"
  fi

}
# End debugging tools. 1}}}
# Functions {{{1
log() {
  [[ $verbose -le 0 ]] || [[ $quiet -gt 0 ]] && return 0  # don't log if -v was not thrown

  local msg=${1:-}
  local level="${2:-INFO}"
  now=$(date "+%Y-%m-%d %H:%M:%S%z")
  if [[ $level == "DEBUG" ]] && [[ "${verbose:-0}" -lt 2 ]] ; then
    return 0
  else
    echo "$now $(hostname) $(basename "$0"):$level $msg" 1>&2
  fi
}

_del() {
  # remove a member from an array n times
  declare needle="$1"
  declare -n haystack="$2"

  for i in "${!haystack[@]}" ; do
    if [[ "$needle" == "${haystack[i]}" ]] ; then
      unset 'haystack[i]'
      status=0
    fi
  done

  return "${status:-1}"
}

_in(){
  # Determine if a string is a member of an array
  declare needle="$1"
  declare -n haystack="$2"

  for item in "${haystack[@]}" ; do
    [[ "$needle" == "$item" ]] && return 0
  done

  return 1
}

_normalize() {
  # normalize a path, e.g.
  # ///tmp/foo//bar/ -> /tmp/foo/bar
  declare thing="$1"
  thing="$(tr -s '/' <<< "$thing")"
  item="${thing%/}"
  echo "$item"
}

# Functions 1}}}
# Usage {{{1
usage() {
cat <<EOD
Usage: $(basename "$0") [OPTION]

Options
  -?, --help                  print this help and exit
  -v, --verbose               increase verbosity
  -q, --quiet                 suppress all output (ignores -v)
  -a, --append <path>         append <path> to \$PATH (can pass multiples)
  -p, --prepend <path>        prepend <path> to \$PATH (can pass multiples)
  -r, --replace               for each <path>, if it's in \$PATH already,
                                remove it before appending or prepending.
  -d, --delete <path>         remove <path> from \$PATH (can pass multiples)

If no OPTION is given, the paths in PATH will each be printed to standard
error on a newline
EOD
exit 1
}
# Usage 1}}}
# Parameters {{{1
#
declare -a append
declare -a prepend
declare -a delete
verbose=0
replace=0
quiet=0

while :
do
  case ${1:-} in
    --help | -\?)
      usage
      exit 0
      ;;
    -v | --verbose)
      # Each instance of -v adds 1 to verbosity
      # shellcheck disable=SC2034
      verbose=$((verbose+1))
      shift
      ;;
    -q | --quiet)
      # shellcheck disable=SC2034
      quiet="1"
      shift
      ;;
    -a | --append)
      # strip repeated '/'s and remove the trailing '/'
      item="$(_normalize "$2")"
      append+=("$item")
      shift 2
      ;;
    -p | --prepend)
      item="$(_normalize "$2")"
      prepend+=("$item")
      shift 2
      ;;
    -d | --delete)
      item="$(_normalize "$2")"
      delete+=("$item")
      shift 2
      ;;
    -r | --replace)
      replace="1"
      shift
      ;;
    --) # End of all options
      shift
      break
      ;;
    -*)
      echo "FATAL: Unknown option : $1" >&2
      exit 1
      shift
      ;;
    *)  # no more options. Stop while loop
      if [[ -z "${append[*]}" && -z "${prepend[*]}" && -z "${delete[*]}" ]] ; then
        echo "WARN: Missing command (need one of '-a', '-p', or '-d')" 1>&2
        exit 1
      fi
      break
      ;;
  esac
done
# Parameters 1}}}

declare -a paths

main() {
  shopt -s extglob
  IFS=':'

  # ingest the path
  read -ra paths <<< "$PATH"

  log "start, paths are now ${paths[*]}" DEBUG

  # do the deleting
  for del_item in "${delete[@]}" ; do
    if _in "$del_item" "paths" ; then
      log "deleting $del_item" DEBUG
      _del "$del_item" "paths"
      print="1"
    else
      log "$del_item is in the path. nothing was done" DEBUG
    fi
  done

  # do the prepending
  for pre_item in "${prepend[@]}" ; do
    if _in "$pre_item" "paths" ; then
      if [[ "$replace" -gt 0 ]] ; then
        log "deleting $pre_item before prepending" DEBUG
        _del "$pre_item" "paths"
        log "prepending $pre_item" DEBUG
        print="1"
        paths=("$pre_item" "${paths[@]}")
      else
        log "$pre_item is in the path. nothing was done" DEBUG
      fi
    else
      log "prepending $pre_item" DEBUG
      print="1"
      paths=("$pre_item" "${paths[@]}")
    fi
  done

  # do the appending
  for app_item in "${append[@]}" ; do
    if _in "$app_item" "paths" ; then
      if [[ "$replace" -gt 0 ]] ; then
        log "deleting $app_item before appending" DEBUG
        _del "$app_item" "paths"
        log "appending $app_item" DEBUG
        print="1"
        paths+=("$app_item")
      else
        log "$app_item is in the path. nothing was done" DEBUG
      fi
    else
      log "appending $app_item" DEBUG
      print="1"
      paths+=("$app_item")
    fi
  done

  log "stop, paths are now  ${paths[*]}" DEBUG

  [[ "${print:-0}" -gt 0 ]] && printf 'export PATH="%s"\n' "${paths[*]}" || return 0
}

main "$@"

# EOF
