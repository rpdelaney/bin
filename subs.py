#!/usr/bin/env python3
"""
Convert a media file into subtitles with whisper, convert the resulting
VTT subtitles to ASS using ffmpeg, and colorize specific tags in the ASS file.

Usage:
  python3 whisper_to_ass.py <input_file> [--model MODEL_NAME]

Requires:
  - whisper (in PATH)
  - ffmpeg (in PATH)
"""

import argparse
import subprocess
import sys

from pathlib import Path


def run_whisper(
    input_file: Path,
    model: str,
    output_format: str = "vtt",
) -> None:
    """
    Run the whisper command-line tool to generate subtitles.
    """
    cmd = [
        "whisper",
        "--model",
        model,
        "--output_format",
        output_format,
        "--word_timestamps",
        "True",
        "--highlight_words",
        "True",
        "--max_line_count",
        "1",
        "--max_line_width",
        "15",
        "--max_words_per_line",
        "3",
        str(input_file),
    ]
    print("Running whisper command:")
    print(" ".join(cmd))
    subprocess.run(cmd, check=True)


def convert_vtt_to_ass(vtt_path: Path) -> Path:
    """
    Convert a VTT subtitle file to ASS format using ffmpeg.
    Returns the output ASS file path.
    """
    if not vtt_path.exists():
        print(f"Error: {vtt_path} does not exist.", file=sys.stderr)
        sys.exit(1)
    ass_path = vtt_path.with_suffix(".ass")
    cmd = ["ffmpeg", "-y", "-i", str(vtt_path), str(ass_path)]
    print("Converting VTT to ASS:")
    print(" ".join(cmd))
    subprocess.run(cmd, check=True)
    return ass_path


def colorize_ass(ass_path: Path) -> None:
    """
    Colorize the words in an ASS subtitle file generated by whisper.
    """
    if not ass_path.exists():
        print(f"Error: {ass_path} does not exist.", file=sys.stderr)
        sys.exit(1)

    try:
        text = ass_path.read_text(encoding="utf-8")
    except Exception as err:  # noqa: BLE001
        print(f"Error reading file {ass_path}: {err}", file=sys.stderr)
        sys.exit(1)

    new_text = text.replace("{\\u1}", "{\\c&HF169CE&}").replace(
        "{\\u0}", "{\\c&HFFFFFF&}"
    )
    try:
        ass_path.write_text(new_text, encoding="utf-8")
    except Exception as err:  # noqa: BLE001
        print(f"Error writing file {ass_path}: {err}", file=sys.stderr)
        sys.exit(1)
    print(f"Colorization applied to {ass_path}")


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(
        description="Generate subtitles with whisper, convert from VTT to "
        "ASS via ffmpeg, and colorize the ASS file."
    )
    parser.add_argument(
        "input_file", type=Path, help="Path to the input media file."
    )
    parser.add_argument(
        "--model",
        default="turbo",
        help="Name of the whisper model (default: turbo)",
    )
    return parser.parse_args()


def main() -> None:
    args = parse_args()

    input_file: Path = args.input_file.resolve()
    model: str = args.model

    # Run whisper to generate VTT subtitles.
    try:
        run_whisper(input_file, model)
    except subprocess.CalledProcessError as err:
        print(f"Error running whisper: {err}", file=sys.stderr)
        sys.exit(1)

    # The VTT file should be in the same directory with same stem and
    # .vtt extension.
    vtt_path = input_file.with_suffix(".vtt")
    if not vtt_path.exists():
        print(
            f"Expected output subtitle file {vtt_path} not found.",
            file=sys.stderr,
        )
        sys.exit(1)

    # Convert the VTT subtitles to ASS.
    try:
        ass_path = convert_vtt_to_ass(vtt_path)
    except subprocess.CalledProcessError as err:
        print(f"Error converting VTT to ASS: {err}", file=sys.stderr)
        sys.exit(1)

    # Colorize the ASS subtitles.
    colorize_ass(ass_path)


if __name__ == "__main__":
    main()
